[project]
name = "exemplos-redes"
version = "20.25.1"
description = "Exemplos da disciplina Programação de Computadores para o CST em Redes de Computadores"
readme = "README.md"
requires-python = ">=3.13"
dependencies = []

[dependency-groups]
dev = ["ruff"]

[tool.ruff]
# Assume Python 3.13
target-version = "py313"

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    ".idea",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "tuplas",
    "htmlcov",
]

# Line configurations.
line-length = 110
indent-width = 4

# Enumerate all fixed violations.
show-fixes = true

[tool.ruff.lint]
# Rules in https://docs.astral.sh/ruff/
select = ["ALL"]

ignore = [
    "D100",    # Missing docstring in public module
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D104",    # Missing docstring in public package
    "D105",    # Missing docstring in magic method
    "D106",    # Missing docstring in public nested class
    "D107",    # Missing docstring in __init__
    "D203",    # 1 blank line required before class docstring
    "D212",    # Multi-line docstring summary should start at the first line
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
    "TRY002",  # Create your own exception
    "TRY003",  # Avoid specifying long messages outside the exception class
    "INP001",  # File is part of an implicit namespace package. Add an __init__.py
    "PLR0913", # Too many arguments in function definition
    "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
    "UP003",   #Checks for uses of type that take a primitive as an argument
    "TD",      # flake8-todos
    "FIX",     # flake8-fixme
    "T",       # flake8-print
    "FBT",     # flake8-boolean-trap
    "DTZ",     # flake8-datetimez
    "BLE",     # flake8-blind-except
    "PTH",     # flake8-use-pathlib
    "PT",      # flake8-pytest-style
    "ERA",     # eradicate
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Line endings will be converted to Unix default \n.
line-ending = "lf"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.per-file-ignores]
"**/{docs,tools,migrations}/*" = ["ALL"]
